import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import AppLayout from '@/layouts/app-layout';
import { BreadcrumbItem } from '@/types';
import { Head, router } from '@inertiajs/react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from '@/components/ui/form';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';

interface Props {
    subjects: Array<{ id: string; name: string }>;
    topics: Array<{ id: string; name: string; subject_id: string }>;
    questionTypes: Array<{ id: number; name: string; value: string }>;
}

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'MCQs',
        href: '/mcqs',
    },
    {
        title: 'Create',
        href: '/mcqs/create',
    },
];

const formSchema = z.object({
    question: z.string().min(1, 'Question is required'),
    explanation: z.string().min(1, 'Explanation is required'),
    option_a: z.string().min(1, 'Option A is required'),
    option_b: z.string(),
    option_c: z.string(),
    option_d: z.string(),
    option_e: z.string(),
    correct_answer: z.union([z.string(), z.array(z.string())]),
    subject: z.string().min(1, 'Subject is required'),
    topic: z.string().min(1, 'Topic is required'),
    difficulty_level: z.enum(['easy', 'medium', 'hard']),
    question_type: z.enum(['single', 'multiple', 'true_false', 'single_a']),
    tags: z.array(z.string()),
    exam_types: z.array(z.string())
});

type FormValues = z.infer<typeof formSchema>;

export default function Create({ subjects, topics, questionTypes }: Props) {
    const form = useForm<FormValues>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            question: "",
            explanation: "",
            option_a: "",
            option_b: "",
            option_c: "",
            option_d: "",
            option_e: "",
            correct_answer: [],
            subject: "",
            topic: "",
            difficulty_level: "medium",
            question_type: "single",
            tags: [],
            exam_types: []
        }
    });

    function onSubmit(values: FormValues) {
        router.post(route('mcqs.store'), values);
    }
            question: "",
            explanation: "",
            option_a: "",
            option_b: "",
            option_c: "",
            option_d: "",
            option_e: "",
            correct_answer: [],
            subject: "",
            topic: "",
            difficulty_level: "medium",
            question_type: "single",
            tags: [],
            exam_types: []
        }
    });

    function onSubmit(values: FormValues) {
        router.post(route('mcqs.store'), values);
    }

    // Function to determine if an option is required based on question type
    const isOptionRequired = (optionKey: string) => {
        const questionType = form.watch('question_type');
        if (optionKey === 'option_a') return true;
        if (questionType === 'multiple') {
            return ['option_b', 'option_c'].includes(optionKey);
        }
        return false;
    };

    // Function to handle question type change
    const handleQuestionTypeChange = (value: string) => {
        form.setValue('question_type', value as FormValues['question_type']);

        if (value === 'true_false') {
            form.setValue('option_a', 'True');
            form.setValue('option_b', 'False');
            form.setValue('option_c', '');
            form.setValue('option_d', '');
            form.setValue('option_e', '');
            form.setValue('correct_answer', '');
        } else if (value === 'single_a') {
            form.setValue('option_a', '');
            form.setValue('option_b', '');
            form.setValue('option_c', '');
            form.setValue('option_d', '');
            form.setValue('option_e', '');
            form.setValue('correct_answer', 'A');
        } else if (value === 'single') {
            form.setValue('correct_answer', '');
        } else if (value === 'multiple') {
            form.setValue('correct_answer', []);
        }
    };
            question: '',
            explanation: '',
            option_a: '',
            option_b: '',
            option_c: '',
            option_d: '',
            option_e: '',
            correct_answer: [],
            subject: '',
            topic: '',
            difficulty_level: 'medium',
            question_type: 'single',
            tags: [],
            exam_types: []
        }
    });

    function onSubmit(data: FormValues) {
        router.post(route('mcqs.store'), data);
        question: '',
        explanation: '',
        option_a: '',
        option_b: '',
        option_c: '',
        option_d: '',
        option_e: '',
        correct_answer: [],
        subject: '',
        topic: '',
        difficulty_level: 'medium',
        question_type: 'single',
        tags: [],
        exam_types: [],
    });

    const handleSubmit = (e: FormEvent) => {
        e.preventDefault();
        post(route('mcqs.store'));
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Create MCQ" />
            <div className="flex h-full flex-1 flex-col gap-4 p-4">
                <div className="rounded-xl border border-sidebar-border/70 p-6 dark:border-sidebar-border">
                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div className="space-y-4">
                            <div>
                                <Label htmlFor="question_type">Question Type *</Label>
                                <Select
                                    value={data.question_type}
                                    onValueChange={(value: 'single' | 'multiple' | 'true_false' | 'single_a') => {
                                        setData('question_type', value);
                                        // Reset form fields when changing question type
                                        if (value === 'true_false') {
                                            setData(current => ({
                                                ...current,
                                                option_a: 'True',
                                                option_b: 'False',
                                                option_c: '',
                                                option_d: '',
                                                option_e: '',
                                                correct_answer: ''
                                            }));
                                        } else if (value === 'single_a') {
                                            setData(current => ({
                                                ...current,
                                                option_a: '',
                                                option_b: '',
                                                option_c: '',
                                                option_d: '',
                                                option_e: '',
                                                correct_answer: 'A'
                                            }));
                                        } else if (value === 'single') {
                                            setData(current => ({
                                                ...current,
                                                option_b: '',
                                                option_c: '',
                                                option_d: '',
                                                option_e: '',
                                                correct_answer: ''
                                            }));
                                        } else if (value === 'multiple') {
                                            setData(current => ({
                                                ...current,
                                                correct_answer: []
                                            }));
                                        }
                                    }}
                                >
                                    <SelectTrigger>
                                        <SelectValue placeholder="Select question type" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {questionTypes.map(type => (
                                            <SelectItem key={type.id} value={type.value}>
                                                {type.name}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                                {errors.question_type && (
                                    <p className="mt-1 text-sm text-red-500">{errors.question_type}</p>
                                )}
                            </div>

                            <div>
                                <Label htmlFor="question">Question *</Label>
                                <Textarea
                                    id="question"
                                    value={data.question}
                                    onChange={(e) => setData('question', e.target.value)}
                                    className="mt-1"
                                    rows={3}
                                />
                                {errors.question && <p className="mt-1 text-sm text-red-500">{errors.question}</p>}
                            </div>

                            <div>
                                <Label htmlFor="explanation">Explanation</Label>
                                <Textarea
                                    id="explanation"
                                    value={data.explanation}
                                    onChange={(e) => setData('explanation', e.target.value)}
                                    className="mt-1"
                                    rows={3}
                                />
                                {errors.explanation && <p className="mt-1 text-sm text-red-500">{errors.explanation}</p>}
                            </div>

                            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                                {/* Option A is always required */}
                                <div>
                                    <Label htmlFor="option_a">Option A *</Label>
                                    <Input
                                        id="option_a"
                                        value={data.option_a}
                                        onChange={(e) => setData('option_a', e.target.value)}
                                        className="mt-1"
                                        required
                                    />
                                    {errors.option_a && <p className="mt-1 text-sm text-red-500">{errors.option_a}</p>}
                                </div>

                                {data.question_type && (
                                    <>
                                        {/* Option B is required for multiple choice */}
                                        <div>
                                            <Label htmlFor="option_b">
                                                Option B {data.question_type === 'multiple' && '*'}
                                            </Label>
                                            <Input
                                                id="option_b"
                                                value={data.option_b}
                                                onChange={(e) => setData('option_b', e.target.value)}
                                                className="mt-1"
                                                required={data.question_type === 'multiple'}
                                            />
                                            {errors.option_b && <p className="mt-1 text-sm text-red-500">{errors.option_b}</p>}
                                        </div>

                                        {/* Option C is required for multiple choice */}
                                        <div>
                                            <Label htmlFor="option_c">
                                                Option C {data.question_type === 'multiple' && '*'}
                                            </Label>
                                            <Input
                                                id="option_c"
                                                value={data.option_c}
                                                onChange={(e) => setData('option_c', e.target.value)}
                                                className="mt-1"
                                                required={data.question_type === 'multiple'}
                                            />
                                            {errors.option_c && <p className="mt-1 text-sm text-red-500">{errors.option_c}</p>}
                                        </div>

                                        {/* Optional options D and E */}
                                        <div>
                                            <Label htmlFor="option_d">Option D (Optional)</Label>
                                            <Input
                                                id="option_d"
                                                value={data.option_d}
                                                onChange={(e) => setData('option_d', e.target.value)}
                                                className="mt-1"
                                            />
                                            {errors.option_d && <p className="mt-1 text-sm text-red-500">{errors.option_d}</p>}
                                        </div>

                                        <div>
                                            <Label htmlFor="option_e">Option E (Optional)</Label>
                                            <Input
                                                id="option_e"
                                                value={data.option_e}
                                                onChange={(e) => setData('option_e', e.target.value)}
                                                className="mt-1"
                                            />
                                            {errors.option_e && <p className="mt-1 text-sm text-red-500">{errors.option_e}</p>}
                                        </div>
                                    </>
                                )}

                                <div>
                                    <Label htmlFor="correct_answer">
                                        Correct Answer{data.question_type === 'multiple' ? '(s)' : ''} *
                                    </Label>
                                    {data.question_type === 'multiple' ? (
                                        <Select
                                            value={
                                                Array.isArray(data.correct_answer)
                                                    ? data.correct_answer[0] ?? ''
                                                    : data.correct_answer
                                            }
                                            onValueChange={(value) => {
                                                if (data.question_type === 'multiple') {
                                                    // For multiple, add/remove from array
                                                    setData('correct_answer', [value]);
                                                } else {
                                                    setData('correct_answer', value);
                                                }
                                            }}
                                        >
                                            <SelectTrigger>
                                                <SelectValue placeholder="Select correct answers" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {data.option_a && (
                                                    <SelectItem value="A">Option A</SelectItem>
                                                )}
                                                {data.option_b && (
                                                    <SelectItem value="B">Option B</SelectItem>
                                                )}
                                                {data.option_c && (
                                                    <SelectItem value="C">Option C</SelectItem>
                                                )}
                                                {data.option_d && (
                                                    <SelectItem value="D">Option D</SelectItem>
                                                )}
                                                {data.option_e && (
                                                    <SelectItem value="E">Option E</SelectItem>
                                                )}
                                            </SelectContent>
                                        </Select>
                                    ) : (
                                        <Select
                                            value={Array.isArray(data.correct_answer) ? data.correct_answer[0] : data.correct_answer}
                                            onValueChange={(value) => setData('correct_answer', value)}
                                            disabled={data.question_type === 'single_a'}
                                        >
                                            <SelectTrigger>
                                                <SelectValue placeholder="Select correct answer" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {data.question_type === 'true_false' ? (
                                                    <>
                                                        <SelectItem value="A">True</SelectItem>
                                                        <SelectItem value="B">False</SelectItem>
                                                    </>
                                                ) : (
                                                    <>
                                                        {data.option_a && (
                                                            <SelectItem value="A">Option A</SelectItem>
                                                        )}
                                                        {data.option_b && (
                                                            <SelectItem value="B">Option B</SelectItem>
                                                        )}
                                                        {data.option_c && (
                                                            <SelectItem value="C">Option C</SelectItem>
                                                        )}
                                                        {data.option_d && (
                                                            <SelectItem value="D">Option D</SelectItem>
                                                        )}
                                                        {data.option_e && (
                                                            <SelectItem value="E">Option E</SelectItem>
                                                        )}
                                                    </>
                                                )}
                                            </SelectContent>
                                        </Select>
                                    )}
                                    {errors.correct_answer && (
                                        <p className="mt-1 text-sm text-red-500">{errors.correct_answer}</p>
                                    )}
                                </div>
                            </div>

                            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                                <div>
                                    <Label htmlFor="subject">Subject *</Label>
                                    <Select
                                        value={data.subject}
                                        onValueChange={(value) => {
                                            setData('subject', value);
                                            setData('topic', ''); // Reset topic when subject changes
                                        }}
                                    >
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select subject" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {subjects.map(subject => (
                                                <SelectItem key={subject.id} value={subject.id}>
                                                    {subject.name}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                    {errors.subject && <p className="mt-1 text-sm text-red-500">{errors.subject}</p>}
                                </div>

                                <div>
                                    <Label htmlFor="topic">Topic *</Label>
                                    <Select
                                        value={data.topic}
                                        onValueChange={(value) => setData('topic', value)}
                                        disabled={!data.subject}
                                    >
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select topic" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {topics
                                                .filter(topic => topic.subject_id === data.subject)
                                                .map(topic => (
                                                    <SelectItem key={topic.id} value={topic.id}>
                                                        {topic.name}
                                                    </SelectItem>
                                                ))
                                            }
                                        </SelectContent>
                                    </Select>
                                    {errors.topic && <p className="mt-1 text-sm text-red-500">{errors.topic}</p>}
                                </div>

                                <div>
                                    <Label htmlFor="correct_answer">Correct Answer *</Label>
                                    <Select
                                        value={Array.isArray(data.correct_answer) ? data.correct_answer[0] ?? '' : data.correct_answer}
                                        onValueChange={(value) => setData('correct_answer', value)}
                                        disabled={data.question_type === 'single_a'}
                                    >
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select correct answer" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {data.question_type === 'true_false' ? (
                                                <>
                                                    <SelectItem value="A">True</SelectItem>
                                                    <SelectItem value="B">False</SelectItem>
                                                </>
                                            ) : (
                                                <>
                                                    {data.option_a && (
                                                        <SelectItem value="A">Option A</SelectItem>
                                                    )}
                                                    {data.option_b && (
                                                        <SelectItem value="B">Option B</SelectItem>
                                                    )}
                                                    {data.option_c && (
                                                        <SelectItem value="C">Option C</SelectItem>
                                                    )}
                                                    {data.option_d && (
                                                        <SelectItem value="D">Option D</SelectItem>
                                                    )}
                                                    {data.option_e && (
                                                        <SelectItem value="E">Option E</SelectItem>
                                                    )}
                                                </>
                                            )}
                                        </SelectContent>
                                    </Select>
                                    {errors.correct_answer && (
                                        <p className="mt-1 text-sm text-red-500">{errors.correct_answer}</p>
                                    )}
                                </div>

                                <div>
                                    <Label htmlFor="difficulty_level">Difficulty Level *</Label>
                                    <Select value={data.difficulty_level} onValueChange={(value: 'easy' | 'medium' | 'hard') => setData('difficulty_level', value)}>
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select difficulty" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="easy">Easy</SelectItem>
                                            <SelectItem value="medium">Medium</SelectItem>
                                            <SelectItem value="hard">Hard</SelectItem>
                                        </SelectContent>
                                    </Select>
                                    {errors.difficulty_level && <p className="mt-1 text-sm text-red-500">{errors.difficulty_level}</p>}
                                </div>

                                <div>
                                    <Label htmlFor="question_type">Question Type</Label>
                                    <Select value={data.question_type} onValueChange={(value) => setData('question_type', value as 'single' | 'multiple' | 'true_false' | 'single_a')}>
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select question type" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="single">Single Answer</SelectItem>
                                            <SelectItem value="multiple">Multiple Answer</SelectItem>
                                        </SelectContent>
                                    </Select>
                                    {errors.question_type && <p className="mt-1 text-sm text-red-500">{errors.question_type}</p>}
                                </div>
                            </div>
                        </div>

                        <div className="flex justify-end gap-4">
                            <Button type="button" variant="outline" onClick={() => window.history.back()}>
                                Cancel
                            </Button>
                            <Button type="submit" disabled={processing}>
                                {processing ? 'Creating...' : 'Create MCQ'}
                            </Button>
                        </div>
                    </form>
                </div>
            </div>
        </AppLayout>
    );
}
